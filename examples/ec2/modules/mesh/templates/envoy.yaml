---
schemaVersion: '2.2'
description: Install Envoy Proxy
parameters:
  region:
    type: String
  mesh:
    type: String
  vnode:
    type: String
  ignoredUID:
    type: String
    default: '1337'
  envoyVersion:
    type: String
    default: 'v1.23.1.0'
  envoyIngressPort:
    type: String
    default: '15000'
  envoyEgressPort:
    type: String
    default: '15001'
  appPort:
    type: String
    default: '80'
  egressIgnoredIPs:
    type: String
    default: '169.254.169.254,169.254.170.2'
  egressIgnoredPorts:
    type: String
    default: '22'
mainSteps:
- action: aws:configureDocker
  name: ConfigureDocker
  precondition:
    StringEquals:
      - platformType
      - Linux
  inputs:
    action: Install
- action: aws:runShellScript
  name: InstallEnvoy
  precondition:
    StringEquals:
      - platformType
      - Linux
  inputs:
    runCommand:
      - |
        #!/bin/bash -ex
        REGION={{region}}
        MESH={{mesh}}
        VNODE={{vnode}}
        USERID={{ignoredUID}}
        ENVOY_VER={{envoyVersion}}

        sudo yum install -y jq

        aws ecr get-login-password --region $REGION | sudo docker login \
            --username AWS \
            --password-stdin 840364872350.dkr.ecr.$REGION.amazonaws.com

        sudo docker run -u $USERID --detach --network host \
            --env APPMESH_RESOURCE_ARN=mesh/$MESH/virtualNode/$VNODE \
            840364872350.dkr.ecr.$REGION.amazonaws.com/aws-appmesh-envoy:$ENVOY_VER-prod
- action: aws:runShellScript
  name: EnableRouting
  precondition:
    StringEquals:
      - platformType
      - Linux
  inputs:
    runCommand:
      - |
        #!/bin/bash -ex
        #APPMESH_START_ENABLED="0"
        APPMESH_IGNORE_UID={{ignoredUID}}
        APPMESH_APP_PORTS={{appPort}}
        APPMESH_ENVOY_EGRESS_PORT={{envoyEgressPort}}
        APPMESH_ENVOY_INGRESS_PORT={{envoyIngressPort}}
        APPMESH_EGRESS_IGNORED_IP={{egressIgnoredIPs}}

        # Enable routing on the application start.
        [ -z "$APPMESH_START_ENABLED" ] && APPMESH_START_ENABLED="0"

        # Enable IPv6.
        [ -z "$APPMESH_ENABLE_IPV6" ] && APPMESH_ENABLE_IPV6="0"

        # Egress traffic from the processess owned by the following UID/GID will be ignored.
        if [ -z "$APPMESH_IGNORE_UID" ] && [ -z "$APPMESH_IGNORE_GID" ]; then
            echo "Variables APPMESH_IGNORE_UID and/or APPMESH_IGNORE_GID must be set."
            echo "Envoy must run under those IDs to be able to properly route it's egress traffic."
            exit 1
        fi

        # Port numbers Application and Envoy are listening on.
        if [ -z "$APPMESH_ENVOY_EGRESS_PORT" ]; then
            echo "APPMESH_ENVOY_EGRESS_PORT must be defined to forward traffic from the application to the proxy."
            exit 1
        fi

        # If an app port was specified, then we also need to enforce the proxies ingress port so we know where to forward traffic.
        if [ ! -z "$APPMESH_APP_PORTS" ] && [ -z "$APPMESH_ENVOY_INGRESS_PORT" ]; then
            echo "APPMESH_ENVOY_INGRESS_PORT must be defined to forward traffic from the APPMESH_APP_PORTS to the proxy."
            exit 1
        fi

        # Comma separated list of ports for which egress traffic will be ignored, we always refuse to route SSH traffic.
        if [ -z "$APPMESH_EGRESS_IGNORED_PORTS" ]; then
            APPMESH_EGRESS_IGNORED_PORTS="22"
        else
            APPMESH_EGRESS_IGNORED_PORTS="$APPMESH_EGRESS_IGNORED_PORTS,22"
        fi

        function initialize() {
            echo "=== Initializing ==="
            if [ ! -z "$APPMESH_APP_PORTS" ]; then
                iptables -t nat -N APPMESH_INGRESS
                if [ "$APPMESH_ENABLE_IPV6" == "1" ]; then
                    ip6tables -t nat -N APPMESH_INGRESS
                fi
            fi
            iptables -t nat -N APPMESH_EGRESS
            if [ "$APPMESH_ENABLE_IPV6" == "1" ]; then
                ip6tables -t nat -N APPMESH_EGRESS
            fi
        }

        function enable_egress_routing() {
            # Stuff to ignore
            [ ! -z "$APPMESH_IGNORE_UID" ] && \
                iptables -t nat -A APPMESH_EGRESS \
                -m owner --uid-owner $APPMESH_IGNORE_UID \
                -j RETURN

            [ ! -z "$APPMESH_IGNORE_GID" ] && \
                iptables -t nat -A APPMESH_EGRESS \
                -m owner --gid-owner $APPMESH_IGNORE_GID \
                -j RETURN

            [ ! -z "$APPMESH_EGRESS_IGNORED_PORTS" ] && \
                for IGNORED_PORT in $(echo "$APPMESH_EGRESS_IGNORED_PORTS" | tr "," "\n"); do
                  iptables -t nat -A APPMESH_EGRESS \
                  -p tcp \
                  -m multiport --dports "$IGNORED_PORT" \
                  -j RETURN
                done

            if [ "$APPMESH_ENABLE_IPV6" == "1" ]; then
              # Stuff to ignore ipv6
              [ ! -z "$APPMESH_IGNORE_UID" ] && \
                  ip6tables -t nat -A APPMESH_EGRESS \
                  -m owner --uid-owner $APPMESH_IGNORE_UID \
                  -j RETURN

              [ ! -z "$APPMESH_IGNORE_GID" ] && \
                  ip6tables -t nat -A APPMESH_EGRESS \
                  -m owner --gid-owner $APPMESH_IGNORE_GID \
                  -j RETURN

              [ ! -z "$APPMESH_EGRESS_IGNORED_PORTS" ] && \
                for IGNORED_PORT in $(echo "$APPMESH_EGRESS_IGNORED_PORTS" | tr "," "\n"); do
                  ip6tables -t nat -A APPMESH_EGRESS \
                  -p tcp \
                  -m multiport --dports "$IGNORED_PORT" \
                  -j RETURN
                done
            fi

            # The list can contain both IPv4 and IPv6 addresses. We will loop over this list
            # to add every IPv4 address into `iptables` and every IPv6 address into `ip6tables`.
            [ ! -z "$APPMESH_EGRESS_IGNORED_IP" ] && \
                for IP_ADDR in $(echo "$APPMESH_EGRESS_IGNORED_IP" | tr "," "\n"); do
                    if [[ $IP_ADDR =~ .*:.* ]]
                    then
                        [ "$APPMESH_ENABLE_IPV6" == "1" ] && \
                            ip6tables -t nat -A APPMESH_EGRESS \
                                -p tcp \
                                -d "$IP_ADDR" \
                                -j RETURN
                    else
                        iptables -t nat -A APPMESH_EGRESS \
                            -p tcp \
                            -d "$IP_ADDR" \
                            -j RETURN
                    fi
                done

            # Redirect everything that is not ignored
            iptables -t nat -A APPMESH_EGRESS \
                -p tcp \
                -j REDIRECT --to $APPMESH_ENVOY_EGRESS_PORT

            # Apply APPMESH_EGRESS chain to non local traffic
            iptables -t nat -A OUTPUT \
                -p tcp \
                -m addrtype ! --dst-type LOCAL \
                -j APPMESH_EGRESS

            if [ "$APPMESH_ENABLE_IPV6" == "1" ]; then
                # Redirect everything that is not ignored ipv6
                ip6tables -t nat -A APPMESH_EGRESS \
                    -p tcp \
                    -j REDIRECT --to $APPMESH_ENVOY_EGRESS_PORT
                # Apply APPMESH_EGRESS chain to non local traffic ipv6
                ip6tables -t nat -A OUTPUT \
                    -p tcp \
                    -m addrtype ! --dst-type LOCAL \
                    -j APPMESH_EGRESS
            fi
        }

        function enable_ingress_redirect_routing() {
            # Route everything arriving at the application port to Envoy
            iptables -t nat -A APPMESH_INGRESS \
                -p tcp \
                -m multiport --dports "$APPMESH_APP_PORTS" \
                -j REDIRECT --to-port "$APPMESH_ENVOY_INGRESS_PORT"

            # Apply AppMesh ingress chain to everything non-local
            iptables -t nat -A PREROUTING \
                -p tcp \
                -m addrtype ! --src-type LOCAL \
                -j APPMESH_INGRESS

            if [ "$APPMESH_ENABLE_IPV6" == "1" ]; then
                # Route everything arriving at the application port to Envoy ipv6
                ip6tables -t nat -A APPMESH_INGRESS \
                    -p tcp \
                    -m multiport --dports "$APPMESH_APP_PORTS" \
                    -j REDIRECT --to-port "$APPMESH_ENVOY_INGRESS_PORT"

                # Apply AppMesh ingress chain to everything non-local ipv6
                ip6tables -t nat -A PREROUTING \
                    -p tcp \
                    -m addrtype ! --src-type LOCAL \
                    -j APPMESH_INGRESS
            fi
        }

        function enable_routing() {
            echo "=== Enabling routing ==="
            enable_egress_routing
            if [ ! -z "$APPMESH_APP_PORTS" ]; then
                enable_ingress_redirect_routing
            fi
        }

        function disable_routing() {
            echo "=== Disabling routing ==="
            iptables -t nat -F APPMESH_INGRESS
            iptables -t nat -F APPMESH_EGRESS

            if [ "$APPMESH_ENABLE_IPV6" == "1" ]; then
                ip6tables -t nat -F APPMESH_INGRESS
                ip6tables -t nat -F APPMESH_EGRESS
            fi
        }

        function dump_status() {
            echo "=== iptables FORWARD table ==="
            iptables -L -v -n
            echo "=== iptables NAT table ==="
            iptables -t nat -L -v -n

            if [ "$APPMESH_ENABLE_IPV6" == "1" ]; then
                echo "=== ip6tables FORWARD table ==="
                ip6tables -L -v -n
                echo "=== ip6tables NAT table ==="
                ip6tables -t nat -L -v -n
            fi
        }

        function clean_up() {
            disable_routing
            ruleNum=$(iptables -L PREROUTING -t nat --line-numbers | grep APPMESH_INGRESS | cut -d " " -f 1)
            iptables -t nat -D PREROUTING $ruleNum

            ruleNum=$(iptables -L OUTPUT -t nat --line-numbers | grep APPMESH_EGRESS | cut -d " " -f 1)
            iptables -t nat -D OUTPUT $ruleNum

            iptables -t nat -X APPMESH_INGRESS
            iptables -t nat -X APPMESH_EGRESS

            if [ "$APPMESH_ENABLE_IPV6" == "1" ]; then
                ruleNum=$(ip6tables -L PREROUTING -t nat --line-numbers | grep APPMESH_INGRESS | cut -d " " -f 1)
                ip6tables -t nat -D PREROUTING $ruleNum

                ruleNum=$(ip6tables -L OUTPUT -t nat --line-numbers | grep APPMESH_EGRESS | cut -d " " -f 1)
                ip6tables -t nat -D OUTPUT $ruleNum

                ip6tables -t nat -X APPMESH_INGRESS
                ip6tables -t nat -X APPMESH_EGRESS
            fi
        }

        function main_loop() {
            echo "=== Entering main loop ==="
            while read -p '> ' cmd; do
                case "$cmd" in
                    "quit")
                        clean_up
                        break
                        ;;
                    "status")
                        dump_status
                        ;;
                    "enable")
                        enable_routing
                        ;;
                    "disable")
                        disable_routing
                        ;;
                    *)
                        echo "Available commands: quit, status, enable, disable"
                        ;;
                esac
            done
        }

        function print_config() {
            echo "=== Input configuration ==="
            env | grep APPMESH_ || true
        }

        print_config

        initialize

        if [ "$APPMESH_START_ENABLED" == "1" ]; then
            enable_routing
        fi

        main_loop
